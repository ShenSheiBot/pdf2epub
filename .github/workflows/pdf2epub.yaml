name: Convert pdf to epub

on:
  workflow_dispatch:

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install poetry
        poetry config virtualenvs.create false
        poetry install --no-root

    - name: Copy input.pdf and config.yaml
      run: |
        echo "${{ secrets.CONFIG }}" > config.yaml
        # Extract values from config.yaml
        TITLE=$(grep "^title:" config.yaml | cut -d ":" -f2- | xargs)
        S3_ACCESS_KEY=$(grep "^s3_access_key_id:" config.yaml | cut -d ":" -f2- | xargs)
        S3_SECRET_KEY=$(grep "^s3_secret_access_key:" config.yaml | cut -d ":" -f2- | xargs)
        S3_ENDPOINT=$(grep "^s3_endpoint:" config.yaml | cut -d ":" -f2- | xargs)
        S3_BUCKET_NAME=$(grep "^s3_bucket_name:" config.yaml | cut -d ":" -f2- | xargs)
        
        # Add src to PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        
        # Download files using extracted values
        python src/utils/monitor.py output/$TITLE $TITLE $S3_ACCESS_KEY $S3_SECRET_KEY $S3_ENDPOINT $S3_BUCKET_NAME --download

    - name: Run breakdown script to parse the table of contents in input.pdf
      run: |
        # Extract values from config.yaml
        TITLE=$(grep "^title:" config.yaml | cut -d ":" -f2- | xargs)
        S3_ACCESS_KEY=$(grep "^s3_access_key_id:" config.yaml | cut -d ":" -f2- | xargs)
        S3_SECRET_KEY=$(grep "^s3_secret_access_key:" config.yaml | cut -d ":" -f2- | xargs)
        S3_ENDPOINT=$(grep "^s3_endpoint:" config.yaml | cut -d ":" -f2- | xargs)
        S3_BUCKET_NAME=$(grep "^s3_bucket_name:" config.yaml | cut -d ":" -f2- | xargs)
        
        # Add src to PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        
        # Check if structure already exists
        if [ -f "output/$TITLE/book_structure.json" ]; then
          echo "Book structure already exists, skipping monitor.py and breakdown.py"
        else
          # Run monitor in background with extracted values
          python src/utils/monitor.py output/$TITLE $TITLE $S3_ACCESS_KEY $S3_SECRET_KEY $S3_ENDPOINT $S3_BUCKET_NAME & 
          
          # Run breakdown script
          python src/breakdown.py -c config.yaml -i output/$TITLE/input.pdf
          
          # Run final upload with extracted values
          python src/utils/monitor.py output/$TITLE $TITLE $S3_ACCESS_KEY $S3_SECRET_KEY $S3_ENDPOINT $S3_BUCKET_NAME --final
        fi

    - name: Generate EPUB
      run: |
        # Extract values from config.yaml
        TITLE=$(grep "^title:" config.yaml | cut -d ":" -f2- | xargs)
        S3_ACCESS_KEY=$(grep "^s3_access_key_id:" config.yaml | cut -d ":" -f2- | xargs)
        S3_SECRET_KEY=$(grep "^s3_secret_access_key:" config.yaml | cut -d ":" -f2- | xargs)
        S3_ENDPOINT=$(grep "^s3_endpoint:" config.yaml | cut -d ":" -f2- | xargs)
        S3_BUCKET_NAME=$(grep "^s3_bucket_name:" config.yaml | cut -d ":" -f2- | xargs)
        
        # Add src to PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        
        # Run monitor in background with extracted values
        python src/utils/monitor.py output/$TITLE $TITLE $S3_ACCESS_KEY $S3_SECRET_KEY $S3_ENDPOINT $S3_BUCKET_NAME & 
        
        # Run generate_epub.py
        python src/generate_epub.py --input output/$TITLE/input.pdf --config config.yaml
        
        # Run final upload with extracted values
        python src/utils/monitor.py output/$TITLE $TITLE $S3_ACCESS_KEY $S3_SECRET_KEY $S3_ENDPOINT $S3_BUCKET_NAME --final
